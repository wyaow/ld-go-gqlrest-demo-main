// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

import (
	"net/http"

	chi "github.com/go-chi/chi/v5"
	"github.com/speedoops/go-gqlrest/handlerx"
)

// Code generated by github.com/speedoops/gqlrest, DO NOT EDIT.

func RegisterHandlers(r *chi.Mux, srv http.Handler, prefix string) {
	// Mapping from `URL` to `GraphQL Operation`
	restOperation := make(handlerx.StringMap)
	// Mapping from `GraphQL Operation` to `Fields Selection`
	restSelection := make(handlerx.StringMap)
	// Mapping from `GraphQL Operation` to `Arguments <Name,Type>`
	restArguments := make(handlerx.ArgTypeMap)
	// Mapping from `GraphQL Operation` to `InputType <Name,Type>`
	restInputs := make(handlerx.ArgTypeMap)
	// Mapping from `Name` to `TypeKind`
	restTypes := make(handlerx.StringMap)

	// Statistics: Queries=5, Mutations=6, Types=25, Inputs=2

	// Part 1/4: Query Objects
	{
		{ // overlapping
			r.Method("GET", prefix+"/api/v1/overlapping", srv)

			restOperation["GET"+":"+prefix+"/api/v1/overlapping"] = "overlapping"
			restSelection["overlapping"] = "{twoFoo,oldFoo,new_foo}"

			methodArguments := make(handlerx.StringMap)
			restArguments["overlapping"] = methodArguments
		}
		{ // todo
			r.Method("GET", prefix+"/api/v1/todos/{id}", srv)

			restOperation["GET"+":"+prefix+"/api/v1/todos/{id}"] = "todo"
			restSelection["todo"] = "{id,text,done,type,categories{name}}"

			methodArguments := make(handlerx.StringMap)
			methodArguments["id"] = "ID!"
			methodArguments["name"] = "String"
			methodArguments["tmp"] = "Int"
			restArguments["todo"] = methodArguments
		}
		{ // todos
			r.Method("GET", prefix+"/api/v1/todos", srv)

			restOperation["GET"+":"+prefix+"/api/v1/todos"] = "todos"
			restSelection["todos"] = "{id,text,done,type,categories{name}}"

			methodArguments := make(handlerx.StringMap)
			methodArguments["ids"] = "[ID!]"
			methodArguments["userId"] = "ID"
			methodArguments["types"] = "[TodoType]"
			methodArguments["text"] = "String"
			methodArguments["text2"] = "[String]"
			methodArguments["done"] = "Boolean"
			methodArguments["done2"] = "[Boolean!]"
			methodArguments["pageOffset"] = "Int"
			methodArguments["pageSize"] = "Int"
			restArguments["todos"] = methodArguments
		}

	}

	// Part 2/4: Mutation Objects
	{
		{ // createTodo
			r.Method("POST", prefix+"/api/v1/todos", srv)

			restOperation["POST"+":"+prefix+"/api/v1/todos"] = "createTodo"
			restSelection["createTodo"] = "{id,text,done,type,categories{name}}"

			methodArguments := make(handlerx.StringMap)
			methodArguments["input"] = "NewTodoInput!"
			restArguments["createTodo"] = methodArguments
		}
		{ // updateTodo
			r.Method("PUT", prefix+"/api/v1/todo/{id}", srv)

			restOperation["PUT"+":"+prefix+"/api/v1/todo/{id}"] = "updateTodo"
			restSelection["updateTodo"] = "{id,text,done,type,categories{name}}"

			methodArguments := make(handlerx.StringMap)
			methodArguments["input"] = "UpdateTodoInput!"
			restArguments["updateTodo"] = methodArguments
		}
		{ // completeTodo
			r.Method("POST", prefix+"/api/v1/todo/{id}/complete", srv)

			restOperation["POST"+":"+prefix+"/api/v1/todo/{id}/complete"] = "completeTodo"
			restSelection["completeTodo"] = "{id,text,done,type,categories{name}}"

			methodArguments := make(handlerx.StringMap)
			methodArguments["id"] = "ID!"
			restArguments["completeTodo"] = methodArguments
		}
		{ // completeTodos
			r.Method("POST", prefix+"/api/v1/todos/bulk-complete", srv)

			restOperation["POST"+":"+prefix+"/api/v1/todos/bulk-complete"] = "completeTodos"
			restSelection["completeTodos"] = "{id,text,done,type,categories{name}}"

			methodArguments := make(handlerx.StringMap)
			methodArguments["ids"] = "[ID!]"
			restArguments["completeTodos"] = methodArguments
		}
		{ // deleteTodo
			r.Method("DELETE", prefix+"/api/v1/todo/{id}", srv)

			restOperation["DELETE"+":"+prefix+"/api/v1/todo/{id}"] = "deleteTodo"
			restSelection["deleteTodo"] = ""

			methodArguments := make(handlerx.StringMap)
			methodArguments["id"] = "ID!"
			restArguments["deleteTodo"] = methodArguments
		}
		{ // deleteTodoByUser
			r.Method("DELETE", prefix+"/api/v1/todos", srv)

			restOperation["DELETE"+":"+prefix+"/api/v1/todos"] = "deleteTodoByUser"
			restSelection["deleteTodoByUser"] = ""

			methodArguments := make(handlerx.StringMap)
			methodArguments["userID"] = "ID!"
			restArguments["deleteTodoByUser"] = methodArguments
		}

	}

	// Part 3/4: User Defined Types
	{
		restTypes["Category"] = "OBJECT"
		restTypes["Mutation"] = "OBJECT"
		restTypes["NewTodoInput"] = "INPUT_OBJECT"
		restTypes["OverlappingFields"] = "OBJECT"
		restTypes["Query"] = "OBJECT"
		restTypes["Role"] = "ENUM"
		restTypes["Todo"] = "OBJECT"
		restTypes["TodoType"] = "ENUM"
		restTypes["UpdateTodoInput"] = "INPUT_OBJECT"
		restTypes["User"] = "OBJECT"
	}

	// Part 4/4: Input Objects
	{
		{ // NewTodoInput
			inputArguments := make(handlerx.StringMap)
			inputArguments["text"] = "String!"
			inputArguments["userID"] = "String!"
			inputArguments["done"] = "Boolean"
			restInputs["NewTodoInput"] = inputArguments
		}
		{ // UpdateTodoInput
			inputArguments := make(handlerx.StringMap)
			inputArguments["id"] = "ID!"
			inputArguments["text"] = "String"
			inputArguments["userID"] = "String"
			restInputs["UpdateTodoInput"] = inputArguments
		}

	}

	handlerx.SetupHTTP2GraphQLMapping(restOperation, restSelection, restArguments, restInputs, restTypes)
}
